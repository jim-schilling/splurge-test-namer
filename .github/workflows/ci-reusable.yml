name: Reusable CI

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: false

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ inputs.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ inputs.python-version }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f pyproject.toml ]; then
            pip install -e '.[dev]' || pip install pytest pytest-cov
          else
            pip install pytest pytest-cov
          fi
      - name: Run pre-commit checks
        run: |
          pre-commit run --all-files || true
      - name: Run tests with coverage
        run: |
          python -m pytest -q --cov=splurge_test_namer --cov-report=xml:coverage.xml --cov-report=html:htmlcov
      - name: Upload coverage artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ inputs.python-version }}
          path: |
            coverage.xml
            htmlcov
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
      - name: Compute coverage percent
        id: coverage
        run: |
          # extract line-rate from coverage.xml (coverage.py produces <coverage line-rate="0.94">)
          if [ -f coverage.xml ]; then
            pct=$(xmllint --xpath 'string(/coverage/@line-rate)' coverage.xml || true)
            if [ -n "$pct" ]; then
              # convert 0.94123 -> 94.12
              pct100=$(awk -v v="$pct" 'BEGIN{printf("%.2f", v*100)}')
              echo "coverage_percent=$pct100" >> $GITHUB_OUTPUT
            else
              echo "coverage_percent=unknown" >> $GITHUB_OUTPUT
            fi
          else
            echo "coverage_percent=unknown" >> $GITHUB_OUTPUT
          fi
      - name: Update coverage badge JSON
        run: |
          pct=${{ steps.coverage.outputs.coverage_percent }}
          color=lightgrey
          if [ "$pct" != "unknown" ]; then
            # choose color thresholds
            color=red
            if (( $(echo "$pct >= 90" | bc -l) )); then color=brightgreen; elif (( $(echo "$pct >= 75" | bc -l) )); then color=yellow; fi
            msg="$pct%"
          else
            msg="unknown"
          fi
          jq -n --arg label "coverage" --arg message "$msg" --arg color "$color" '{schemaVersion:1, label:$label, message:$message, color:$color}' > .github/badges/coverage.json
      - name: Commit coverage badge to main
        if: github.ref == 'refs/heads/main' && github.actor != 'github-actions[bot]'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .github/badges/coverage.json
          git commit -m "Update coverage badge: ${{ steps.coverage.outputs.coverage_percent }}%" || echo "No changes to commit"
          git push origin HEAD:main || echo "Push failed (likely due to permissions)"
